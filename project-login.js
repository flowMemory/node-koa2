/*

注册接口：
    1. 注册接口要保障主键的唯一性，在注册前需要查询库数据是否已存在
    2. 注册的核心数据要以密文的方式存储，比如密码...

  注册接口常规方式：
      1. 注册信息提交
      2. 校验路由参数的合法性
      3. 校验读取数据库校验账号信息的唯一性
      4. 对需要加密的字段进行存储加密，为账号分配主键id
      5. 最后入口返回客户端成功的信息

      * 在这个过程中如果发生异常也需要把异常抛出，定义明确的错误码，和错误信息

    加密库：
        bcrypt.js

服务端接口：
    1. 登录接口
        登录接口常规方式：
            登录的两种状态：
              一首次登录，需要提供账号密码验证身份，返回token
              二利用token做无痕登录，验证token的有效性，有效则直接登录，无效则重新拉起账号登录
            1. 客户端登录提交登录信息和登录方式到服务接口
            2. 验证路由参数的合法性
            3. 向数据库查询账号，密码的有效性
            4. 查询成功后需要根据用户的身份信息生成登录身份令牌（token）返回给客户端

            * 在登录的过程中注意登录身份的有效性，token的时效，给客户端明确的返回信息

        登陆令牌：token
        访问令牌：Access token
        密保令牌：Security token
        会话令牌：Session token
            1. 令牌含义：
                在OAuth协议中，token是在输入了用户名和密码之后获取的，利用这个token你可以拥有查看或者操作相应的资源的权限。
                你有这些权限，是因为服务器知道你是谁（authentication）以后赋予你的，
                所以token这个东西，其实就是你的一个“代表”，或者说完全能代表你的“通行证”。
                器知道你是谁（authentication）以后赋予你的，所以token这个东西，其实就是你的一个“代表”，或者说完全能代表你的“通行证”。
            
            2. 生成：
                1. 用户登录后后端根据用户信息生成一个唯一的凭证，这个就是token值
            
            3. 使用：
                客服端获取服务端的token后保存在本地中，作为用户已登录的依据，访问时验证token的有效性，从而无需用户重复登录
                可以保存在用户的cookie localStorage

            4. token的有效性：
                资讯型网站用户数据不是太敏感，token可以较长。银行类，支付类网站token时效性较短

            5. 唯一性：
                当用户重新登录或者token已过时需要重新获取令牌

*. 登录方法再次学习：
    token验证 or cookie验证：
        一. 共性：两者都是为了验证用户是否登录，以及登录的有效性。区别是前后端的实现做法不一样
        二. 实现方式的区别：
              1. token方式: 具体的实现流程参考node-koa
                  用户提交账户密码到服务端（head base64加密传输），服务端解析校验参数，通过后颁发token给客户端
                  token使用用户信息和签名（key,期限等字段）加密组成的密文
                  用户再次登录会提交这个token，服务端解密token，验签，如果签名通过则拿到用户信息
                  在需要用户权限的接口，每次调用都要携带token，给予服务端校验用户的合法性，校验通过之后在开始业务逻辑的执行

              2. cookie：参考点单小程序(这里表述的有问题，没有详细区分cookie和session)
                  用户登录的时候生成唯一的id，即Sessionid，通过在响应的header中set-Cookie字段传输给前端
                  前端通过cook或者localStorage存储，在下次同源请求时浏览器会自动带上Sessionid（微信小程序必须手动修改求情head）
                  服务端再去查询该id，获取对应的用户信息

              3. token对比cookie的优点：
                  1. 在安全性方面，token 能防止 csrf 攻击。
                  2. 在扩展性方面，token 可以处理多端的身份验证，不仅仅局限于浏览器，只要客户端能对 token 进行储存就行。
                  3. token 在跨域共享资源上表现惊艳，只要不同域的服务器之间约定好签名规则，大家都是一家人！
                  4. token 可以携带丰富的用户信息，只要不怕别人知道，你想传什么随你便！



*/ 